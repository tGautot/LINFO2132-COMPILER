Notes:
    - \0 means epsilon
    - Starts with lower case: terminal symbol, otherwise, non-terminal


Code -> StatementList
StatementList -> Statement StatementList | \0
Statement -> FunctionDef | VarCreation | ValCreation | VarAssign | Record | FunctionCall | IfCond | ForLoop | WhileLoop | ReturnExpr | \0

Type -> bool | int | real | string | bool [ ] | int [ ] | real [ ] | string [ ] | identifier | identifier [ ]

FunctionDef -> proc identifier ( ParamList ) Type CodeBlock
ParamList -> Param MoreParams | \0
MoreParams -> , ParamList | \0
Param -> Type identifier | \0

CodeBlock -> { StatementList }

VarCreation -> var identifier Type ; | var identifier Type = Expression ;
ValCreation -> val identifier Type = Expression ;

Record -> record identifier { RecordVars }
RecordVars -> RecordVar RecordVars | \0
RecordVar -> identifier Type ;

FunctionCall -> identifier ( ParamVals )
ParamVals -> Expression MoreParamVals | \0
MoreParamVals -> , ParamVals | \0

IfCond -> if ( Expression ) CodeBlock ElseCond
ElseCond -> else CodeBlock | \0

ForLoop -> for identifier = Expression to Expression by Expression CodeBlock
WhileLoop -> while Expression CodeBlock
ReturnExpr -> return Expression ;

Expression -> Value | identifier | RefToValue | ArrayCreation | ObjectCreation | MathExpr | Comparison | FunctionCall
Value -> intValue | realValue | boolValue | stringValue
RefToValue -> ArrayAccess | ObjectAccess
ArrayCreation -> Type [ ] ( Expression )
ObjectCreation -> identifier ( ParamVals )
Comparison -> Expression == Expression | Expression <> Expression | ...
ArrayAccess -> identifier [ Expression ]
ObjectAccess -> RefToValue . identifier | identifier . identifier

MathExpr -> - Expression | ( Expression ) | Expression + Expression | Expression - Expression | ... (* / %)